cause is transitive.

On "SIGN-WHAT because SIGN-CAUSE":
	perform "transaction create";
	WHAT;
	if not, perform "transaction abort";
	if not, reply "i do not think EXT-WHAT";
	CAUSE;
	if not, perform "transaction abort";
	if not, reply "i do not think EXT-CAUSE";
	perform "list add _user whyBecause WHAT CAUSE";
	perform "transaction commit";
	reply "ok, EXT-WHAT because EXT-CAUSE".
	
On "why do SIGN-WHAT":
	do WHAT;
	undo;
	if i know, get the cause of WHAT from _user whyBecause list;
	set cause to ...;
	reply "because EXT-CAUSE";
	then, if not, reply "sorry, it is not the case that EXT-WHAT".
On "why does SIGN-WHAT", why do WHAT.

On "why am I PHRASE-WHAT":
	am i WHAT;
	if not, reply "sorry, it is not the case that you are WHAT";
	get the cause of i am WHAT from _user whyBecause list;
	set cause to ...;
	then, reply "because EXT-CAUSE".

On "why might SIGN-WHAT":
	get the cause of WHAT from _user whyBecause list;
	if not, reply "I don't know";
	set cause to ...;
	then, reply "because EXT-CAUSE".
On "why does SIGN-WHAT", why do WHAT.


On "do SIGN-WHAT because SIGN-CAUSE":
	does WHAT exist in _user whyBecause list;
	if not, reply "sorry, it is not the case that EXT-WHAT";
	is CAUSE the cause of WHAT;
	if not, reply "sorry, it is not the case EXT-WHAT because EXT-CAUSE";
	then, reply "yes, EXT-WHAT because EXT-CAUSE".
On "does SIGN-WHAT because SIGN-CAUSE", do WHAT because CAUSE.

On "is SIGN-CAUSE the cause of SIGN-WHAT":
	perform "list isAttrVal SUBJECT whyBecause cause WHAT CAUSE";
	if not, reply "no, EXT-WHAT is not because EXT-CAUSE";
	then, reply "yes, EXT-WHAT because EXT-CAUSE".

